/*                            IJduino 1.0
Requires:
 * 8X8 LED grid MAX7219
 * Mini Breadboard
 * Atmega328
 * Button
 * 2 Wires
 * 4.5 Volt
 (c) IJhack 2014 GNU GPL
http://ijhack.org/
 */
#include "LedControl.h"
#include <EEPROM.h>

PROGMEM prog_uchar CH[] = {
3, 8, B0000000, B0000000, B0000000, B0000000, B0000000, // space
1, 8, B1011111, B0000000, B0000000, B0000000, B0000000, // !
3, 8, B0000011, B0000000, B0000011, B0000000, B0000000, // "
5, 8, B0010100, B0111110, B0010100, B0111110, B0010100, // #
4, 8, B0100100, B1101010, B0101011, B0010010, B0000000, // $
5, 8, B1100011, B0010011, B0001000, B1100100, B1100011, // %
5, 8, B0110110, B1001001, B1010110, B0100000, B1010000, // &
1, 8, B0000011, B0000000, B0000000, B0000000, B0000000, // '
3, 8, B0011100, B0100010, B1000001, B0000000, B0000000, // (
3, 8, B1000001, B0100010, B0011100, B0000000, B0000000, // )
5, 8, B0101000, B0011000, B0001110, B0011000, B0101000, // *
5, 8, B0001000, B0001000, B0111110, B0001000, B0001000, // +
2, 8, B10110000, B1110000, B0000000, B0000000, B0000000, // ,
4, 8, B0001000, B0001000, B0001000, B0001000, B0000000, // -
2, 8, B1100000, B1100000, B0000000, B0000000, B0000000, // .
4, 8, B1100000, B0011000, B0000110, B0000001, B0000000, // /
4, 8, B0111110, B1000001, B1000001, B0111110, B0000000, // 0
3, 8, B1000010, B1111111, B1000000, B0000000, B0000000, // 1
4, 8, B1100010, B1010001, B1001001, B1000110, B0000000, // 2
4, 8, B0100010, B1000001, B1001001, B0110110, B0000000, // 3
4, 8, B0011000, B0010100, B0010010, B1111111, B0000000, // 4
4, 8, B0100111, B1000101, B1000101, B0111001, B0000000, // 5
4, 8, B0111110, B1001001, B1001001, B0110000, B0000000, // 6
4, 8, B1100001, B0010001, B0001001, B0000111, B0000000, // 7
4, 8, B0110110, B1001001, B1001001, B0110110, B0000000, // 8
4, 8, B0000110, B1001001, B1001001, B0111110, B0000000, // 9
1, 8, B0100100, B00000000, B0000000, B0000000, B0000000, // :
2, 8, B10000000, B01010000, B0000000, B0000000, B0000000, // ;
3, 8, B0010000, B0101000, B1000100, B0000000, B0000000, // <
3, 8, B0010100, B0010100, B0010100, B0000000, B0000000, // =
3, 8, B1000100, B0101000, B0010000, B0000000, B0000000, // >
4, 8, B0000010, B1011001, B0001001, B0000110, B0000000, // ?
5, 8, B0111110, B1001001, B1010101, B1011101, B0001110, // @
4, 8, B1111110, B0010001, B0010001, B1111110, B0000000, // A
4, 8, B1111111, B1001001, B1001001, B0110110, B0000000, // B
5, 8, B0000111, B0001000, B1111110, B0001000, B0000111, // Ψ
5, 8, B1111000, B1000110, B1000001, B1000110, B1111000, // Δ
4, 8, B1111111, B1001001, B1001001, B1000001, B0000000, // E
5, 8, B0000110, B1001001, B1111111, B0001001, B0000110, // Φ
4, 8, B1111111, B0000001, B0000001, B0000001, B0000000, // Γ
4, 8, B1111111, B0001000, B0001000, B1111111, B0000000, // H
3, 8, B1000001, B1111111, B1000001, B0000000, B0000000, // I
4, 8, B1000001, B1001001, B1001001, B1000001, B0000000, // Ξ
4, 8, B1111111, B0001000, B0010100, B1100011, B0000000, // K
5, 8, B1111000, B0000110, B0000001, B0000110, B1111000, // Λ
5, 8, B1111111, B0000010, B0001100, B0000010, B1111111, // M
5, 8, B1111111, B0000100, B0001000, B0010000, B1111111, // N
4, 8, B0111110, B1000001, B1000001, B0111110, B0000000, // O
4, 8, B1111111, B0000001, B0000001, B1111111, B0000000, // Π
3, 8, B0000110, B0001001, B0000110, B0000000, B0000000, // Degree
4, 8, B1111111, B0001001, B0001001, B0000110, B0000000, // Ρ
5, 8, B1000001, B1100011, B1010101, B1001001, B1000001, // Σ
5, 8, B0000001, B0000001, B1111111, B0000001, B0000001, // T
4, 8, B0111110, B1001001, B1001001, B0111110, B0000000, // Θ
5, 8, B1001110, B1010001, B1010001, B1010001, B1001110, // V
4, 8, B0111110, B1000001, B1000001, B0100010, B0000000, // C
5, 8, B1100011, B0010100, B0001000, B0010100, B1100011, // X
5, 8, B0000111, B0001000, B1110000, B0001000, B0000111, // Y
4, 8, B1100001, B1010001, B1001001, B1000111, B0000000, // Z
2, 8, B1111111, B1000001, B0000000, B0000000, B0000000, // [
4, 8, B0000001, B0000110, B0011000, B1100000, B0000000, // backslash
2, 8, B1000001, B1111111, B0000000, B0000000, B0000000, // ]
3, 8, B0000010, B0000001, B0000010, B0000000, B0000000, // hat
4, 8, B1000000, B1000000, B1000000, B1000000, B0000000, // _
2, 8, B0000001, B0000010, B0000000, B0000000, B0000000, // `
4, 8, B0100000, B1010100, B1010100, B1111000, B0000000, // a
4, 8, B1111111, B1000100, B1000100, B0111000, B0000000, // b
4, 8, B0111000, B1000100, B1000100, B0101000, B0000000, // c
4, 8, B0111000, B1000100, B1000100, B1111111, B0000000, // d
4, 8, B0111000, B1010100, B1010100, B0011000, B0000000, // e
3, 8, B0000100, B1111110, B0000101, B0000000, B0000000, // f
4, 8, B10011000, B10100100, B10100100, B01111000, B0000000, // g
4, 8, B1111111, B0000100, B0000100, B1111000, B0000000, // h
3, 8, B1000100, B1111101, B1000000, B0000000, B0000000, // i
4, 8, B1000000, B10000000, B10000100, B1111101, B0000000, // j
4, 8, B1111111, B0010000, B0101000, B1000100, B0000000, // k
3, 8, B1000001, B1111111, B1000000, B0000000, B0000000, // l
5, 8, B1111100, B0000100, B1111100, B0000100, B1111000, // m
4, 8, B1111100, B0000100, B0000100, B1111000, B0000000, // n
4, 8, B0111000, B1000100, B1000100, B0111000, B0000000, // o
4, 8, B11111100, B0100100, B0100100, B0011000, B0000000, // p
4, 8, B0011000, B0100100, B0100100, B11111100, B0000000, // q
4, 8, B1111100, B0001000, B0000100, B0000100, B0000000, // r
4, 8, B1001000, B1010100, B1010100, B0100100, B0000000, // s
3, 8, B0000100, B0111111, B1000100, B0000000, B0000000, // t
4, 8, B0111100, B1000000, B1000000, B1111100, B0000000, // u
5, 8, B0011100, B0100000, B1000000, B0100000, B0011100, // v
5, 8, B0111100, B1000000, B0111100, B1000000, B0111100, // w
5, 8, B1000100, B0101000, B0010000, B0101000, B1000100, // x
4, 8, B10011100, B10100000, B10100000, B1111100, B0000000, // y
3, 8, B1100100, B1010100, B1001100, B0000000, B0000000, // z
3, 8, B0001000, B0110110, B1000001, B0000000, B0000000, // {
1, 8, B1111111, B0000000, B0000000, B0000000, B0000000, // |
3, 8, B1000001, B0110110, B0001000, B0000000, B0000000, // }
4, 8, B0001000, B0000100, B0001000, B0000100, B0000000, // ~
};


/* ijduino */
//#define	MAX_DEVICES	1
//#define	CLK_PIN		5  // or SCK
//#define	CS_PIN		21  // or SS
//#define	DATA_PIN	20  // or MOSI

/* Arduino Nano */
#define	MAX_DEVICES	1
#define	CLK_PIN		10  // or SCK
#define	CS_PIN		11  // or SS
#define	DATA_PIN	12  // or MOSI

/*Arduino Mini */
//#define	MAX_DEVICES	1
//#define	CLK_PIN		7  // or SCK
//#define	CS_PIN		8  // or SS
//#define	DATA_PIN	9  // or MOSI


/* using VCC, GND, DIN 21, CS 21, CLK 5 for the MAX7219 */
// Create a new LedControl for 1 device...
LedControl lc = LedControl(DATA_PIN, CLK_PIN, CS_PIN, MAX_DEVICES);
/* lowPin used for ijduino*/
//int lowPin = 11;           /* ground pin for the buton ;-) */
int buttonPin = 13;          /* choose the input pin for the pushbutton */
int lastButtonState = LOW;   /* the previous reading from the input pin */
int lastDebounceTime = 0;    /* the last time the output pin was toggled */
int debounceDelay = 50;      /* the debounce time; increase if the output flickers */
int animation = 0;           /* Set animationcount to 0 */
int buttonState = LOW;       /* Set buttonstate to low */
int brightness = 5;          /* Set brightneslevel to 5 (0 to 15 are valid) */
const int animations = 21;   /* the number of animations we have */

int (*ijnimations[animations])() = {
  ijhacklogo,
  temperature,
  ghost,
  invader,
  heart,
  invadesquid,
  jumper,
  ijlogowink,
  heartbeat,
  eq,
  invaderagain,

  pong,
  snake,
  arrows,
  directions,
  packman,
  diagonals,
  waterdrip,
  //  aliens,
  blockanim,
  pulse,

  tewdoodles
};

void setup() {
  /*
     The MAX72XX is in power-saving mode on startup,
     we have to do a wakeup call
   */
  lc.shutdown(0, false);
  /* Set the brightness to a medium values */
  /*
  * Set the brightness of the display.
  * Params:
  * int addr      the address of the display to control
  * int intensity the brightness of the display.
  *               Only values between 0(darkest) and 15(brightest) are valid.
  */
  lc.setIntensity(0, brightness);
  /*
  * Switch all Leds on the display off.
  * Params:
  * int addr The address of the display to control
  */
  lc.clearDisplay(0);
  /* setup pins for ijduino */
  //pinMode(buttonPin, INPUT_PULLUP);
  //pinMode(lowPin, OUTPUT);
  //digitalWrite(lowPin, LOW);
}

void loop() {
  (ijnimations)[animation]();
}

bool render(byte* frame, int delaytime) {
  lc.setColumn(0, 0, frame[7]);
  lc.setColumn(0, 1, frame[6]);
  lc.setColumn(0, 2, frame[5]);
  lc.setColumn(0, 3, frame[4]);
  lc.setColumn(0, 4, frame[3]);
  lc.setColumn(0, 5, frame[2]);
  lc.setColumn(0, 6, frame[1]);
  lc.setColumn(0, 7, frame[0]);

  long startTime = millis();
  while ((startTime + delaytime) > millis()) {

    // read the state of the switch into a local variable:
    int reading = digitalRead(buttonPin);

    // check to see if you just pressed the button
    // (i.e. the input went from HIGH to LOW),  and you've waited
    // long enough since the last press to ignore any noise:

    // If the switch changed, due to noise or pressing:
    if (reading != lastButtonState) {
      // reset the debouncing timer
      lastDebounceTime = millis();
    }

    if ((millis() - lastDebounceTime) > debounceDelay) {
      // whatever the reading is at, it's been there for longer
      // than the debounce delay, so take it as the actual current state:

      // if the button state has changed:
      if (reading != buttonState) {
        buttonState = reading;

        // only toggle the animation if the new button state is HIGH
        if (buttonState == LOW) {
          animation++;
          if (animation > animations) {
            animation = 0;
          }
          return true;
        }
      }
    }

    // save the reading.  Next time through the loop,
    // it'll be the lastButtonState:
    lastButtonState = reading;
  }
  return false;  /* don't skip the rest */
}

